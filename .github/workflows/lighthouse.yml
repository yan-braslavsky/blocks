name: Lighthouse CI

on:
  pull_request:
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/lighthouse.yml'
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/lighthouse.yml'

# Allow one concurrent Lighthouse run per PR/branch
concurrency:
  group: lighthouse-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    # Don't fail CI if Lighthouse fails - this is informational only
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
            backend/package-lock.json

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NODE_ENV: production
          # Use mock mode for Lighthouse testing
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_USE_MOCKS: '1'

      - name: Start backend server
        run: |
          cd backend
          npm run build
          npm start &
          echo $! > backend.pid
        env:
          PORT: 3001
          USE_MOCKS: '1'
          NODE_ENV: production

      - name: Start frontend server
        run: |
          cd frontend
          npm start &
          echo $! > frontend.pid
        env:
          PORT: 3000
          NODE_ENV: production

      - name: Wait for servers to be ready
        run: |
          # Wait for backend
          for i in {1..30}; do
            if curl -f http://localhost:3001/health >/dev/null 2>&1; then
              echo "Backend is ready"
              break
            fi
            echo "Waiting for backend... (attempt $i/30)"
            sleep 2
          done
          
          # Wait for frontend
          for i in {1..30}; do
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "Frontend is ready"
              break
            fi
            echo "Waiting for frontend... (attempt $i/30)"
            sleep 2
          done

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: '.lighthouserc.js'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          # Fallback to uploading artifacts only if no token is set
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}

      - name: Stop servers
        if: always()
        run: |
          # Kill backend if running
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) || true
            rm backend.pid
          fi
          
          # Kill frontend if running
          if [ -f frontend.pid ]; then
            kill $(cat frontend.pid) || true
            rm frontend.pid
          fi
          
          # Kill any remaining node processes
          pkill -f "npm start" || true
          pkill -f "node.*server" || true

      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Try to find Lighthouse results
            const resultsPath = '.lighthouseci/';
            if (!fs.existsSync(resultsPath)) {
              console.log('No Lighthouse results found');
              return;
            }
            
            // Create a simple comment about Lighthouse completion
            const comment = `
            ## 🔍 Lighthouse Performance Audit
            
            ✅ Lighthouse CI has completed for this PR.
            
            The audit includes:
            - Performance metrics (FCP, LCP, CLS, etc.)
            - Accessibility checks
            - Best practices validation
            - SEO analysis
            
            > **Note**: This is an informational check and does not block the PR. Performance regressions should be reviewed but won't fail CI.
            
            View detailed results in the [Actions tab](${context.payload.pull_request.html_url}/checks).
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Upload Lighthouse artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30